/* automatically generated by rust-bindgen */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201605;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 24;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __WORDSIZE: u32 = 32;
pub const _BITS_WCHAR_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -2147483648;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 2147483647;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 4294967295;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const INTPTR_MIN: i32 = -2147483648;
pub const INTPTR_MAX: u32 = 2147483647;
pub const UINTPTR_MAX: u32 = 4294967295;
pub const PTRDIFF_MIN: i32 = -2147483648;
pub const PTRDIFF_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: u32 = 4294967295;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const PICONTROL_DEVICE: &'static [u8; 16usize] = b"/dev/piControl0\0";
pub const PICONFIG_FILE: &'static [u8; 22usize] = b"/etc/revpi/config.rsc\0";
pub const PICONFIG_FILE_WHEEZY: &'static [u8; 23usize] = b"/opt/KUNBUS/config.rsc\0";
pub const REV_PI_DEV_FIRST_RIGHT: u32 = 32;
pub const REV_PI_DEV_CNT_MAX: u32 = 64;
pub const REV_PI_ERROR_MSG_LEN: u32 = 256;
pub const PICONTROL_SW_OFFSET: u32 = 24577;
pub const PICONTROL_SW_MODBUS_TCP_SLAVE: u32 = 24577;
pub const PICONTROL_SW_MODBUS_RTU_SLAVE: u32 = 24578;
pub const PICONTROL_SW_MODBUS_TCP_MASTER: u32 = 24579;
pub const PICONTROL_SW_MODBUS_RTU_MASTER: u32 = 24580;
pub const PICONTROL_SW_PROFINET_CONTROLLER: u32 = 24581;
pub const PICONTROL_SW_PROFINET_DEVICE: u32 = 24582;
pub const PICONTROL_SW_REVPI_SEVEN: u32 = 24583;
pub const PICONTROL_SW_REVPI_CLOUD: u32 = 24584;
pub const PICONTROL_NOT_CONNECTED: u32 = 32768;
pub const PICONTROL_NOT_CONNECTED_MASK: u32 = 32767;
pub const PICONTROL_USER_MODULE_TYPE: u32 = 32768;
pub const PICONTROL_USER_MODULE_MASK: u32 = 32767;
pub const KB_IOC_MAGIC: u8 = 75u8;
pub const KB_EVENT_RESET: u32 = 1;
pub const CONFIG_DATA_SIZE: u32 = 256;
pub const PICONTROL_CONFIG_ERROR_WRONG_MODULE_TYPE: i32 = -10;
pub const PICONTROL_CONFIG_ERROR_WRONG_INPUT_LENGTH: i32 = -11;
pub const PICONTROL_CONFIG_ERROR_WRONG_OUTPUT_LENGTH: i32 = -12;
pub const PICONTROL_CONFIG_ERROR_WRONG_CONFIG_LENGTH: i32 = -13;
pub const PICONTROL_CONFIG_ERROR_WRONG_INPUT_OFFSET: i32 = -14;
pub const PICONTROL_CONFIG_ERROR_WRONG_OUTPUT_OFFSET: i32 = -15;
pub const PICONTROL_CONFIG_ERROR_WRONG_CONFIG_OFFSET: i32 = -16;
pub const PICONTROL_STATUS_RUNNING: u32 = 1;
pub const PICONTROL_STATUS_EXTRA_MODULE: u32 = 2;
pub const PICONTROL_STATUS_MISSING_MODULE: u32 = 4;
pub const PICONTROL_STATUS_SIZE_MISMATCH: u32 = 8;
pub const PICONTROL_STATUS_LEFT_GATEWAY: u32 = 16;
pub const PICONTROL_STATUS_RIGHT_GATEWAY: u32 = 32;
pub const PICONTROL_STATUS_X2_DIN: u32 = 64;
pub const PICONTROL_LED_A1_GREEN: u32 = 1;
pub const PICONTROL_LED_A1_RED: u32 = 2;
pub const PICONTROL_LED_A2_GREEN: u32 = 4;
pub const PICONTROL_LED_A2_RED: u32 = 8;
pub const PICONTROL_LED_A3_GREEN: u32 = 16;
pub const PICONTROL_LED_A3_RED: u32 = 32;
pub const PICONTROL_X2_DOUT: u32 = 64;
pub const PICONTROL_WD_TRIGGER: u32 = 128;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDeviceInfoStr {
    pub i8uAddress: u8,
    pub i32uSerialnumber: u32,
    pub i16uModuleType: u16,
    pub i16uHW_Revision: u16,
    pub i16uSW_Major: u16,
    pub i16uSW_Minor: u16,
    pub i32uSVN_Revision: u32,
    pub i16uInputLength: u16,
    pub i16uOutputLength: u16,
    pub i16uConfigLength: u16,
    pub i16uBaseOffset: u16,
    pub i16uInputOffset: u16,
    pub i16uOutputOffset: u16,
    pub i16uConfigOffset: u16,
    pub i16uFirstEntry: u16,
    pub i16uEntries: u16,
    pub i8uModuleState: u8,
    pub i8uActive: u8,
    pub i8uReserve: [u8; 30usize],
}
#[test]
fn bindgen_test_layout_SDeviceInfoStr() {
    assert_eq!(
        ::std::mem::size_of::<SDeviceInfoStr>(),
        72usize,
        concat!("Size of: ", stringify!(SDeviceInfoStr))
    );
    assert_eq!(
        ::std::mem::align_of::<SDeviceInfoStr>(),
        4usize,
        concat!("Alignment of ", stringify!(SDeviceInfoStr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDeviceInfoStr>())).i8uAddress as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDeviceInfoStr),
            "::",
            stringify!(i8uAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDeviceInfoStr>())).i32uSerialnumber as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDeviceInfoStr),
            "::",
            stringify!(i32uSerialnumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDeviceInfoStr>())).i16uModuleType as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDeviceInfoStr),
            "::",
            stringify!(i16uModuleType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDeviceInfoStr>())).i16uHW_Revision as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(SDeviceInfoStr),
            "::",
            stringify!(i16uHW_Revision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDeviceInfoStr>())).i16uSW_Major as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDeviceInfoStr),
            "::",
            stringify!(i16uSW_Major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDeviceInfoStr>())).i16uSW_Minor as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(SDeviceInfoStr),
            "::",
            stringify!(i16uSW_Minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDeviceInfoStr>())).i32uSVN_Revision as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDeviceInfoStr),
            "::",
            stringify!(i32uSVN_Revision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDeviceInfoStr>())).i16uInputLength as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDeviceInfoStr),
            "::",
            stringify!(i16uInputLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDeviceInfoStr>())).i16uOutputLength as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(SDeviceInfoStr),
            "::",
            stringify!(i16uOutputLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDeviceInfoStr>())).i16uConfigLength as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDeviceInfoStr),
            "::",
            stringify!(i16uConfigLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDeviceInfoStr>())).i16uBaseOffset as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SDeviceInfoStr),
            "::",
            stringify!(i16uBaseOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDeviceInfoStr>())).i16uInputOffset as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDeviceInfoStr),
            "::",
            stringify!(i16uInputOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDeviceInfoStr>())).i16uOutputOffset as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(SDeviceInfoStr),
            "::",
            stringify!(i16uOutputOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDeviceInfoStr>())).i16uConfigOffset as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDeviceInfoStr),
            "::",
            stringify!(i16uConfigOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDeviceInfoStr>())).i16uFirstEntry as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(SDeviceInfoStr),
            "::",
            stringify!(i16uFirstEntry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDeviceInfoStr>())).i16uEntries as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDeviceInfoStr),
            "::",
            stringify!(i16uEntries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDeviceInfoStr>())).i8uModuleState as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(SDeviceInfoStr),
            "::",
            stringify!(i8uModuleState)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDeviceInfoStr>())).i8uActive as *const _ as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(SDeviceInfoStr),
            "::",
            stringify!(i8uActive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDeviceInfoStr>())).i8uReserve as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDeviceInfoStr),
            "::",
            stringify!(i8uReserve)
        )
    );
}
pub type SDeviceInfo = SDeviceInfoStr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SEntryInfoStr {
    pub i8uAddress: u8,
    pub i8uType: u8,
    pub i16uIndex: u16,
    pub i16uBitLength: u16,
    pub i8uBitPos: u8,
    pub i16uOffset: u16,
    pub i32uDefault: u32,
    pub strVarName: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_SEntryInfoStr() {
    assert_eq!(
        ::std::mem::size_of::<SEntryInfoStr>(),
        48usize,
        concat!("Size of: ", stringify!(SEntryInfoStr))
    );
    assert_eq!(
        ::std::mem::align_of::<SEntryInfoStr>(),
        4usize,
        concat!("Alignment of ", stringify!(SEntryInfoStr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SEntryInfoStr>())).i8uAddress as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SEntryInfoStr),
            "::",
            stringify!(i8uAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SEntryInfoStr>())).i8uType as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(SEntryInfoStr),
            "::",
            stringify!(i8uType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SEntryInfoStr>())).i16uIndex as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SEntryInfoStr),
            "::",
            stringify!(i16uIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SEntryInfoStr>())).i16uBitLength as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SEntryInfoStr),
            "::",
            stringify!(i16uBitLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SEntryInfoStr>())).i8uBitPos as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(SEntryInfoStr),
            "::",
            stringify!(i8uBitPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SEntryInfoStr>())).i16uOffset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SEntryInfoStr),
            "::",
            stringify!(i16uOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SEntryInfoStr>())).i32uDefault as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SEntryInfoStr),
            "::",
            stringify!(i32uDefault)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SEntryInfoStr>())).strVarName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SEntryInfoStr),
            "::",
            stringify!(strVarName)
        )
    );
}
pub type SEntryInfo = SEntryInfoStr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPIValueStr {
    pub i16uAddress: u16,
    pub i8uBit: u8,
    pub i8uValue: u8,
}
#[test]
fn bindgen_test_layout_SPIValueStr() {
    assert_eq!(
        ::std::mem::size_of::<SPIValueStr>(),
        4usize,
        concat!("Size of: ", stringify!(SPIValueStr))
    );
    assert_eq!(
        ::std::mem::align_of::<SPIValueStr>(),
        2usize,
        concat!("Alignment of ", stringify!(SPIValueStr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPIValueStr>())).i16uAddress as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIValueStr),
            "::",
            stringify!(i16uAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPIValueStr>())).i8uBit as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIValueStr),
            "::",
            stringify!(i8uBit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPIValueStr>())).i8uValue as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIValueStr),
            "::",
            stringify!(i8uValue)
        )
    );
}
pub type SPIValue = SPIValueStr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPIVariableStr {
    pub strVarName: [::std::os::raw::c_char; 32usize],
    pub i16uAddress: u16,
    pub i8uBit: u8,
    pub i16uLength: u16,
}
#[test]
fn bindgen_test_layout_SPIVariableStr() {
    assert_eq!(
        ::std::mem::size_of::<SPIVariableStr>(),
        38usize,
        concat!("Size of: ", stringify!(SPIVariableStr))
    );
    assert_eq!(
        ::std::mem::align_of::<SPIVariableStr>(),
        2usize,
        concat!("Alignment of ", stringify!(SPIVariableStr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPIVariableStr>())).strVarName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIVariableStr),
            "::",
            stringify!(strVarName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPIVariableStr>())).i16uAddress as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIVariableStr),
            "::",
            stringify!(i16uAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPIVariableStr>())).i8uBit as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIVariableStr),
            "::",
            stringify!(i8uBit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPIVariableStr>())).i16uLength as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIVariableStr),
            "::",
            stringify!(i16uLength)
        )
    );
}
pub type SPIVariable = SPIVariableStr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDIOResetCounterStr {
    pub i8uAddress: u8,
    pub i16uBitfield: u16,
}
#[test]
fn bindgen_test_layout_SDIOResetCounterStr() {
    assert_eq!(
        ::std::mem::size_of::<SDIOResetCounterStr>(),
        4usize,
        concat!("Size of: ", stringify!(SDIOResetCounterStr))
    );
    assert_eq!(
        ::std::mem::align_of::<SDIOResetCounterStr>(),
        2usize,
        concat!("Alignment of ", stringify!(SDIOResetCounterStr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDIOResetCounterStr>())).i8uAddress as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIOResetCounterStr),
            "::",
            stringify!(i8uAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SDIOResetCounterStr>())).i16uBitfield as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIOResetCounterStr),
            "::",
            stringify!(i16uBitfield)
        )
    );
}
pub type SDIOResetCounter = SDIOResetCounterStr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SConfigDataStr {
    pub bLeft: u8,
    pub i16uLen: u16,
    pub acData: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_SConfigDataStr() {
    assert_eq!(
        ::std::mem::size_of::<SConfigDataStr>(),
        260usize,
        concat!("Size of: ", stringify!(SConfigDataStr))
    );
    assert_eq!(
        ::std::mem::align_of::<SConfigDataStr>(),
        2usize,
        concat!("Alignment of ", stringify!(SConfigDataStr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SConfigDataStr>())).bLeft as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SConfigDataStr),
            "::",
            stringify!(bLeft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SConfigDataStr>())).i16uLen as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SConfigDataStr),
            "::",
            stringify!(i16uLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SConfigDataStr>())).acData as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SConfigDataStr),
            "::",
            stringify!(acData)
        )
    );
}
pub type SConfigData = SConfigDataStr;
